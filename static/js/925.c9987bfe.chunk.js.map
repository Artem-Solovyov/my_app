{"version":3,"file":"static/js/925.c9987bfe.chunk.js","mappings":"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","sources":["pages/Chat/ChatPage.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState} from \"react\";\r\nimport {ChatMessageAPIType} from \"../../api/Chat_api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat_reducer\";\r\nimport {AppStateType} from \"../../redux/redux_store\";\r\n\r\n\r\ntype PropsType = {}\r\nconst ChatPage: React.FC<PropsType> = () => {\r\n  return (\r\n    <div>\r\n      <Chat/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n  const status = useSelector((state: AppStateType) => state.chat.status)\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    dispatch(startMessagesListening())\r\n    return () => {\r\n      // @ts-ignore\r\n      // dispatch(stopMessagesListening())\r\n    }\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <div>\r\n      {status === 'error' && <div>Error. Please refresh the page</div>}\r\n      <>\r\n        <Messages/>\r\n        <AddMessageForm/>\r\n      </>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n  useEffect(() => {\r\n    if (isAutoScroll) {\r\n      messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n    }\r\n  }, [messages])\r\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\nconst element = e.currentTarget\r\n    if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n      !isAutoScroll && setIsAutoScroll(true)\r\n    } else {\r\n      isAutoScroll && setIsAutoScroll(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{height: '300px', overflowY: 'auto', marginBottom: '20px', maxWidth: '700px', marginLeft: '40px'}} onScroll={scrollHandler}>\r\n      {messages.map((m, index) => <Message key={index} message={m}/>)}\r\n      <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n  )\r\n}\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\r\n  const id = useSelector((state: AppStateType) => state.auth.id)\r\n  return (\r\n    <div>\r\n      { id === message.userId ? <div style={{textAlign: 'right'}}>\r\n          <b>{message.userName}</b> <img src={message.photo} style={{width: \"40px\", borderRadius: '50%'}}/>\r\n        <br/>\r\n        <div style={{\r\n          textAlign: 'left',\r\n          borderRadius: '7px',\r\n          paddingLeft: '7px',\r\n          marginRight: '45px',\r\n          display: 'inline-block',\r\n          minWidth: '150px',\r\n          minHeight: '25px',\r\n          backgroundColor: 'blueviolet'\r\n        }}>{message.message}</div>\r\n      </div>\r\n      : <div><img src={message.photo} style={{width: \"40px\", borderRadius: '50%'}}/> <b>{message.userName}</b>\r\n          <br/>\r\n          <div style={{\r\n            borderRadius: '7px',\r\n            paddingLeft: '7px',\r\n            marginLeft: '45px',\r\n            display: 'inline-block',\r\n            minWidth: '150px',\r\n            minHeight: '25px',\r\n            backgroundColor: 'blueviolet'\r\n          }}>{message.message}</div>\r\n        </div>}\r\n    </div>\r\n  )\r\n})\r\nconst AddMessageForm: React.FC = () => {\r\n  const [message, setMessage] = useState('')\r\n  const dispatch = useDispatch()\r\n  const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n  const sendMessageHandler = () => {\r\n    if (!message) {\r\n      return\r\n    }\r\n    // @ts-ignore\r\n    dispatch(sendMessage(message))\r\n    setMessage('')\r\n  }\r\n  return (\r\n    <div style={{maxWidth: '700px', marginLeft: '40px', display: \"flex\"}}>\r\n      <div>\r\n        <textarea placeholder={'Enter your message...'}\r\n                  cols={90}\r\n                  onChange={(e) => setMessage((e.currentTarget.value))}\r\n                  value={message}></textarea>\r\n      </div>\r\n      <div style={{marginLeft: '20px', marginTop: '10px'}}>\r\n        <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatPage"],"names":["Chat","status","useSelector","state","chat","dispatch","useDispatch","useEffect","startMessagesListening","Messages","AddMessageForm","messagesAnchorRef","useRef","messages","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","marginBottom","maxWidth","marginLeft","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","ref","React","id","auth","userId","textAlign","userName","src","photo","width","borderRadius","paddingLeft","marginRight","display","minWidth","minHeight","backgroundColor","setMessage","placeholder","cols","onChange","value","marginTop","disabled","onClick","sendMessage"],"sourceRoot":""}